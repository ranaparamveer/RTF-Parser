package com.trick2live.parser.rtf.parser.rtf;

import java.io.IOException;
import java.io.PrintStream;


/**
 * Token Manager. generated by javacc
 */
public class RTFParserTokenManager {

    /**
     * Debug output.
     */
    public PrintStream debugStream = System.out;

    /**
     * Set debug output.
     * @param ds PrintStream
     */
    public void setDebugStream(PrintStream ds) {
        debugStream = ds;
    }

    private int jjStopStringLiteralDfa_2(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x7ff06L) != 0L) {
                    return 1;
                }
                return -1;
            default:
                return -1;
        }
    }

    private int jjStartNfa_2(int pos, long active0) {
        return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_2() {
        switch (curChar) {
            case '\\':
                jjmatchedKind = 1;
                return jjMoveStringLiteralDfa1_2(0x7ff04L);
            case '{':
                return jjStopAtPos(0, 6);
            case '}':
                return jjStopAtPos(0, 7);
            default:
                return jjMoveNfa_2(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_2(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_2(0, active0);
            return 1;
        }
        switch (curChar) {
            case 10:
                if ((active0 & 0x800L) != 0L)
                    return jjStopAtPos(1, 11);
                break;
            case 13:
                if ((active0 & 0x1000L) != 0L)
                    return jjStopAtPos(1, 12);
                break;
            case 39: //'
                if ((active0 & 0x4L) != 0L)
                    return jjStopAtPos(1, 2);
                break;
            case 42: //*
                if ((active0 & 0x2000L) != 0L)
                    return jjStopAtPos(1, 13);
                break;
            case 45: //-
                if ((active0 & 0x200L) != 0L)
                    return jjStopAtPos(1, 9);
                break;
            case 58: //:
                if ((active0 & 0x8000L) != 0L)
                    return jjStopAtPos(1, 15);
                break;
            case 92: //\
                if ((active0 & 0x40000L) != 0L)
                    return jjStopAtPos(1, 18);
                break;
            case 95: //_
                if ((active0 & 0x400L) != 0L)
                    return jjStopAtPos(1, 10);
                break;
            case 123: //{
                if ((active0 & 0x10000L) != 0L)
                    return jjStopAtPos(1, 16);
                break;
            case 124: //|
                if ((active0 & 0x4000L) != 0L)
                    return jjStopAtPos(1, 14);
                break;
            case 125: //}
                if ((active0 & 0x20000L) != 0L)
                    return jjStopAtPos(1, 17);
                break;
            case 126: //~
                if ((active0 & 0x100L) != 0L)
                    return jjStopAtPos(1, 8);
                break;
            default:
                break;
        }
        return jjStartNfa_2(0, active0);
    }

    static final long[] jjbitVec0 = {
            0xfffffffffffffffeL,
            0xffffffffffffffffL,
            0xffffffffffffffffL,
            0xffffffffffffffffL
    };
    static final long[] jjbitVec2 = {
            0x0L,
            0x0L,
            0xffffffffffffffffL,
            0xffffffffffffffffL
    };

    private int jjMoveNfa_2(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                        case 2:
                            if ((0xffffffffffffd9ffL & l) == 0L)
                                break;
                            if (kind > 20)
                                kind = 20;
                            jjCheckNAdd(2);
                            break;
                        case 1:
                            if ((0xfc00fffeffffd9ffL & l) != 0L && kind > 19)
                                kind = 19;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xd7ffffffefffffffL & l) != 0L) {
                                if (kind > 20)
                                    kind = 20;
                                jjCheckNAdd(2);
                            } else if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 1:
                            if ((0xd0000001e8000001L & l) != 0L && kind > 19)
                                kind = 19;
                            break;
                        case 2:
                            if ((0xd7ffffffefffffffL & l) == 0L)
                                break;
                            if (kind > 20)
                                kind = 20;
                            jjCheckNAdd(2);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                        case 2:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 20)
                                kind = 20;
                            jjCheckNAdd(2);
                            break;
                        case 1:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                                kind = 19;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (IOException e) {
                return curPos;
            }
        }
    }

    private int jjStopStringLiteralDfa_1(int pos, long active0) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private int jjStartNfa_1(int pos, long active0) {
        return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_1() {
        switch (curChar) {
            case 92: //\
                jjmatchedKind = 1;
                return jjMoveStringLiteralDfa1_1(0x4L);
            case 123: //{
                return jjStopAtPos(0, 6);
            case 125: //}
                return jjStopAtPos(0, 7);
            default:
                return jjMoveNfa_1(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_1(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_1(0, active0);
            return 1;
        }
        switch (curChar) {
            case 39: //'
                if ((active0 & 0x4L) != 0L)
                    return jjStopAtPos(1, 2);
                break;
            default:
                break;
        }
        return jjStartNfa_1(0, active0);
    }

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 2;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) != 0L && kind > 22)
                                kind = 22;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x7e0000007eL & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 1:
                            if ((0x7e0000007eL & l) != 0L && kind > 22)
                                kind = 22;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (IOException e) {
                return curPos;
            }
        }
    }

    private int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if ((active0 & 0x800b8000000L) != 0L)
                    return 0;
                if ((active0 & 0xfffff7ff40000000L) != 0L || (active1 & 0x7fffL) != 0L) {
                    jjmatchedKind = 80;
                    return 0;
                }
                return -1;
            case 1:
                if ((active0 & 0x650000000L) != 0L)
                    return 0;
                if ((active0 & 0xfffffff980000000L) != 0L || (active1 & 0x7fffL) != 0L) {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 1;
                    }
                    return 0;
                }
                return -1;
            case 2:
                if ((active0 & 0xb001c00000000L) != 0L)
                    return 0;
                if ((active1 & 0x1L) != 0L) {
                    if (jjmatchedPos < 1) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 1;
                    }
                    return -1;
                }
                if ((active0 & 0xfff4ffe180000000L) != 0L || (active1 & 0x7ffeL) != 0L) {
                    jjmatchedKind = 80;
                    jjmatchedPos = 2;
                    return 0;
                }
                return -1;
            case 3:
                if ((active0 & 0x1401e000000000L) != 0L)
                    return 0;
                if ((active1 & 0x3808L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active1 & 0x1L) != 0L) {
                    if (jjmatchedPos < 1) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 1;
                    }
                    return -1;
                }
                if ((active0 & 0xffe0fe0180000000L) != 0L || (active1 & 0x47f6L) != 0L) {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 3;
                    }
                    return 0;
                }
                return -1;
            case 4:
                if ((active0 & 0x100000000L) != 0L)
                    return 0;
                if ((active1 & 0x3808L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active1 & 0x4L) != 0L) {
                    if (jjmatchedPos < 3) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 3;
                    }
                    return -1;
                }
                if ((active1 & 0x1L) != 0L) {
                    if (jjmatchedPos < 1) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 1;
                    }
                    return -1;
                }
                if ((active0 & 0xffe0fe4080000000L) != 0L || (active1 & 0x47f2L) != 0L) {
                    jjmatchedKind = 80;
                    jjmatchedPos = 4;
                    return 0;
                }
                return -1;
            case 5:
                if ((active0 & 0xe60060000000000L) != 0L)
                    return 0;
                if ((active1 & 0x3808L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active1 & 0x4L) != 0L) {
                    if (jjmatchedPos < 3) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 3;
                    }
                    return -1;
                }
                if ((active1 & 0x702L) != 0L) {
                    if (jjmatchedPos < 4) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 4;
                    }
                    return -1;
                }
                if ((active1 & 0x1L) != 0L) {
                    if (jjmatchedPos < 1) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 1;
                    }
                    return -1;
                }
                if ((active0 & 0xf180f84080000000L) != 0L || (active1 & 0x40f0L) != 0L) {
                    jjmatchedKind = 80;
                    jjmatchedPos = 5;
                    return 0;
                }
                return -1;
            case 6:
                if ((active0 & 0x3180084000000000L) != 0L)
                    return 0;
                if ((active1 & 0x3808L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active1 & 0x4L) != 0L) {
                    if (jjmatchedPos < 3) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 3;
                    }
                    return -1;
                }
                if ((active1 & 0x702L) != 0L) {
                    if (jjmatchedPos < 4) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 4;
                    }
                    return -1;
                }
                if ((active1 & 0x1L) != 0L) {
                    if (jjmatchedPos < 1) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 1;
                    }
                    return -1;
                }
                if ((active0 & 0xc000f00080000000L) != 0L || (active1 & 0x40f0L) != 0L) {
                    jjmatchedKind = 80;
                    jjmatchedPos = 6;
                    return 0;
                }
                return -1;
            case 7:
                if ((active0 & 0x300080000000L) != 0L)
                    return 0;
                if ((active1 & 0x3808L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active1 & 0x4L) != 0L) {
                    if (jjmatchedPos < 3) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 3;
                    }
                    return -1;
                }
                if ((active1 & 0x702L) != 0L) {
                    if (jjmatchedPos < 4) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 4;
                    }
                    return -1;
                }
                if ((active1 & 0x1L) != 0L) {
                    if (jjmatchedPos < 1) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 1;
                    }
                    return -1;
                }
                if ((active0 & 0xc000c00000000000L) != 0L || (active1 & 0x40f0L) != 0L) {
                    if (jjmatchedPos != 7) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 7;
                    }
                    return 0;
                }
                return -1;
            case 8:
                if ((active0 & 0x800000000000L) != 0L || (active1 & 0x4010L) != 0L) {
                    jjmatchedKind = 80;
                    jjmatchedPos = 8;
                    return 0;
                }
                if ((active0 & 0xc000400000000000L) != 0L)
                    return 0;
                if ((active1 & 0xe0L) != 0L) {
                    if (jjmatchedPos < 7) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 7;
                    }
                    return -1;
                }
                if ((active1 & 0x1800L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active1 & 0x702L) != 0L) {
                    if (jjmatchedPos < 4) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 4;
                    }
                    return -1;
                }
                if ((active1 & 0x1L) != 0L) {
                    if (jjmatchedPos < 1) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 1;
                    }
                    return -1;
                }
                return -1;
            case 9:
                if ((active0 & 0x800000000000L) != 0L)
                    return 0;
                if ((active1 & 0x4010L) != 0L) {
                    if (jjmatchedPos != 9) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 9;
                    }
                    return 0;
                }
                if ((active1 & 0xe0L) != 0L) {
                    if (jjmatchedPos < 7) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 7;
                    }
                    return -1;
                }
                if ((active1 & 0x702L) != 0L) {
                    if (jjmatchedPos < 4) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 4;
                    }
                    return -1;
                }
                return -1;
            case 10:
                if ((active1 & 0xe0L) != 0L) {
                    if (jjmatchedPos < 7) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 7;
                    }
                    return -1;
                }
                if ((active1 & 0x300L) != 0L) {
                    if (jjmatchedPos < 4) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 4;
                    }
                    return -1;
                }
                if ((active1 & 0x4010L) != 0L) {
                    jjmatchedKind = 80;
                    jjmatchedPos = 10;
                    return 0;
                }
                return -1;
            case 11:
                if ((active1 & 0x60L) != 0L) {
                    if (jjmatchedPos < 7) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 7;
                    }
                    return -1;
                }
                if ((active1 & 0x4010L) != 0L) {
                    jjmatchedKind = 80;
                    jjmatchedPos = 11;
                    return 0;
                }
                return -1;
            case 12:
                if ((active1 & 0x40L) != 0L) {
                    if (jjmatchedPos < 7) {
                        jjmatchedKind = 80;
                        jjmatchedPos = 7;
                    }
                    return -1;
                }
                if ((active1 & 0x4010L) != 0L) {
                    jjmatchedKind = 80;
                    jjmatchedPos = 12;
                    return 0;
                }
                return -1;
            case 13:
                if ((active1 & 0x10L) != 0L)
                    return 0;
                if ((active1 & 0x4000L) != 0L) {
                    jjmatchedKind = 80;
                    jjmatchedPos = 13;
                    return 0;
                }
                return -1;
            default:
                return -1;
        }
    }

    private int jjStartNfa_0(int pos, long active0, long active1) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 9:
                return jjStopAtPos(0, 26);
            case 10:
                return jjStopAtPos(0, 24);
            case 13:
                return jjStopAtPos(0, 25);
            case 32:
                return jjStopAtPos(0, 23);
            case 92:
                jjmatchedKind = 1;
                return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
            case 97:
                return jjMoveStringLiteralDfa1_0(0x6000000000L, 0x0L);
            case 98:
                return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x100040000000L, 0xfL);
            case 100:
                return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0x1e0000000000000L, 0x0L);
            case 102:
                jjmatchedKind = 29;
                return jjMoveStringLiteralDfa1_0(0x80080000000L, 0x0L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
            case 108:
                return jjMoveStringLiteralDfa1_0(0x5410400000000000L, 0x0L);
            case 109:
                return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0x8240700000000L, 0x0L);
            case 114:
                return jjMoveStringLiteralDfa1_0(0xa800021000000000L, 0x0L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x4000L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x3ff0L);
            case 117:
                jjmatchedKind = 27;
                return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
            case 122:
                return jjMoveStringLiteralDfa1_0(0x6000000000000L, 0x0L);
            case 123:
                return jjStopAtPos(0, 6);
            case 125:
                return jjStopAtPos(0, 7);
            default:
                return jjMoveNfa_0(1, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0, long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1);
            return 1;
        }
        switch (curChar) {
            case 39:
                if ((active0 & 0x4L) != 0L)
                    return jjStopAtPos(1, 2);
                break;
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x9000800000000L, active1, 0L);
            case 99:
                if ((active0 & 0x10000000L) != 0L)
                    return jjStartNfaWithStates_0(1, 28, 0);
                else if ((active0 & 0x200000000L) != 0L) {
                    jjmatchedKind = 33;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x480000000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000000L, active1, 0xf0L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x28000000000L, active1, 0x4000L);
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0x10400000000000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0xfL);
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0xa0000000000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x140256000000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L, active1, 0L);
            case 113:
                return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3f00L);
            case 115:
                if ((active0 & 0x40000000L) != 0L)
                    return jjStartNfaWithStates_0(1, 30, 0);
                break;
            case 116:
                return jjMoveStringLiteralDfa2_0(active0, 0x3000801000000000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
            case 119:
                return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0, active1);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(0, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1);
            return 2;
        }
        switch (curChar) {
            case 70:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
            case 78:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
            case 97:
                if ((active0 & 0x400000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 34, 0);
                return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
            case 98:
                if ((active0 & 0x1000000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 48, 0);
                return jjMoveStringLiteralDfa3_0(active0, 0xc000000000000000L, active1, 0L);
            case 99:
                if ((active0 & 0x800000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 35, 0);
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L);
            case 100:
                return jjMoveStringLiteralDfa3_0(active0, 0x60000000000000L, active1, 0L);
            case 102:
                if ((active0 & 0x1000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 36, 0);
                return jjMoveStringLiteralDfa3_0(active0, 0x18000000000L, active1, 0x7f2L);
            case 104:
                return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
            case 106:
                if ((active0 & 0x2000000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 49, 0);
                break;
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x2200100000000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa3_0(active0, 0x14080000000000L, active1, 0L);
            case 114:
                if ((active0 & 0x8000000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 51, 0);
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x180606000000000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0xc00000000000000L, active1, 0L);
            case 118:
                return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
            case 119:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3808L);
            case 121:
                return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0, active1);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(1, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1);
            return 3;
        }
        switch (curChar) {
            case 87:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3808L);
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x60000080000000L, active1, 0L);
            case 101:
                if ((active0 & 0x10000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 52, 0);
                return jjMoveStringLiteralDfa4_0(active0, 0x240000000000L, active1, 0L);
            case 102:
                if ((active0 & 0x8000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 39, 0);
                break;
            case 105:
                if ((active0 & 0x2000000000L) != 0L) {
                    jjmatchedKind = 37;
                    jjmatchedPos = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x4100000000L, active1, 0x1L);
            case 106:
                if ((active0 & 0x4000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 50, 0);
                break;
            case 108:
                return jjMoveStringLiteralDfa4_0(active0, 0xc200800000000000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa4_0(active0, 0x3000000000000000L, active1, 0L);
            case 111:
                if ((active0 & 0x10000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 40, 0);
                return jjMoveStringLiteralDfa4_0(active0, 0xc00100000000000L, active1, 0x4L);
            case 112:
                return jjMoveStringLiteralDfa4_0(active0, 0x180000000000000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xf0L);
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x4a0000000000L, active1, 0x4702L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0, active1);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(2, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(3, active0, active1);
            return 4;
        }
        switch (curChar) {
            case 87:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0x3180000000000000L, active1, 0L);
            case 98:
                return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa5_0(active0, 0x204000000000L, active1, 0L);
            case 101:
                return jjMoveStringLiteralDfa5_0(active0, 0x200800000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x3808L);
            case 109:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xf0L);
            case 110:
                if ((active0 & 0x100000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 32, 0);
                break;
            case 113:
                return jjMoveStringLiteralDfa5_0(active0, 0xc000000000000000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa5_0(active0, 0x100080000000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa5_0(active0, 0x60000000000000L, active1, 0x4702L);
            case 116:
                return jjMoveStringLiteralDfa5_0(active0, 0xc00480000000000L, active1, 0x1L);
            case 120:
                return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0, active1);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(3, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(4, active0, active1);
            return 5;
        }
        switch (curChar) {
            case 84:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
            case 87:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x702L);
            case 97:
                return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
            case 98:
                return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa6_0(active0, 0x180000000000000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x3808L);
            case 101:
                if ((active0 & 0x400000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 58, 0);
                else if ((active0 & 0x800000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 59, 0);
                break;
            case 104:
                if ((active0 & 0x20000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 53, 0);
                else if ((active0 & 0x40000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 54, 0);
                break;
            case 108:
                if ((active0 & 0x20000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 41, 0);
                return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L);
            case 112:
                return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x4000L);
            case 114:
                return jjMoveStringLiteralDfa6_0(active0, 0x3000000000000000L, active1, 0x4L);
            case 115:
                return jjMoveStringLiteralDfa6_0(active0, 0x800080000000L, active1, 0L);
            case 116:
                if ((active0 & 0x40000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 42, 0);
                else if ((active0 & 0x200000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 57, 0);
                return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0xf0L);
            case 117:
                return jjMoveStringLiteralDfa6_0(active0, 0xc000000000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0, active1);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(4, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(5, active0, active1);
            return 6;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
            case 98:
                return jjMoveStringLiteralDfa7_0(active0, 0x500000000000L, active1, 0L);
            case 101:
                if ((active0 & 0x80000000000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 55, 0);
                else if ((active0 & 0x100000000000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 56, 0);
                return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0x4001L);
            case 103:
                if ((active0 & 0x4000000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 38, 0);
                break;
            case 104:
                return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x702L);
            case 107:
                if ((active0 & 0x1000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 60, 0);
                else if ((active0 & 0x2000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 61, 0);
                break;
            case 108:
                if ((active0 & 0x80000000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 43, 0);
                break;
            case 111:
                return jjMoveStringLiteralDfa7_0(active0, 0xc000000000000000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x3808L);
            case 118:
                return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L);
            case 120:
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xf0L);
            default:
                break;
        }
        return jjStartNfa_0(5, active0, active1);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(5, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(6, active0, active1);
            return 7;
        }
        switch (curChar) {
            case 99:
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000L);
            case 100:
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x702L);
            case 101:
                return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
            case 104:
                if ((active1 & 0x8L) != 0L)
                    return jjStopAtPos(7, 67);
                else if ((active1 & 0x2000L) != 0L) {
                    jjmatchedKind = 77;
                    jjmatchedPos = 7;
                }
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1800L);
            case 108:
                if ((active0 & 0x100000000000L) != 0L)
                    return jjStartNfaWithStates_0(7, 44, 0);
                else if ((active0 & 0x200000000000L) != 0L)
                    return jjStartNfaWithStates_0(7, 45, 0);
                return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L);
            case 112:
                if ((active1 & 0x4L) != 0L)
                    return jjStopAtPos(7, 66);
                break;
            case 116:
                if ((active0 & 0x80000000L) != 0L)
                    return jjStartNfaWithStates_0(7, 31, 0);
                return jjMoveStringLiteralDfa8_0(active0, 0xc000000000000000L, active1, 0xf0L);
            case 120:
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);
            default:
                break;
        }
        return jjStartNfa_0(6, active0, active1);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(6, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(7, active0, active1);
            return 8;
        }
        switch (curChar) {
            case 65:
                if ((active1 & 0x800L) != 0L)
                    return jjStopAtPos(8, 75);
                break;
            case 66:
                if ((active1 & 0x1000L) != 0L)
                    return jjStopAtPos(8, 76);
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L);
            case 76:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20L);
            case 82:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40L);
            case 84:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80L);
            case 101:
                if ((active0 & 0x400000000000L) != 0L)
                    return jjStartNfaWithStates_0(8, 46, 0);
                else if ((active0 & 0x4000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(8, 62, 0);
                else if ((active0 & 0x8000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(8, 63, 0);
                return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000L);
            case 116:
                if ((active1 & 0x1L) != 0L)
                    return jjStopAtPos(8, 64);
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x702L);
            default:
                break;
        }
        return jjStartNfa_0(7, active0, active1);
    }

    private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(7, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(8, active0, active1);
            return 9;
        }
        switch (curChar) {
            case 101:
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20L);
            case 102:
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L);
            case 104:
                if ((active1 & 0x2L) != 0L)
                    return jjStopAtPos(9, 65);
                else if ((active1 & 0x400L) != 0L) {
                    jjmatchedKind = 74;
                    jjmatchedPos = 9;
                }
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x300L);
            case 105:
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40L);
            case 111:
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x90L);
            case 116:
                if ((active0 & 0x800000000000L) != 0L)
                    return jjStartNfaWithStates_0(9, 47, 0);
                break;
            default:
                break;
        }
        return jjStartNfa_0(8, active0, active1);
    }

    private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(8, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(9, 0L, active1);
            return 10;
        }
        switch (curChar) {
            case 65:
                if ((active1 & 0x100L) != 0L)
                    return jjStopAtPos(10, 72);
                break;
            case 66:
                if ((active1 & 0x200L) != 0L)
                    return jjStopAtPos(10, 73);
                break;
            case 102:
                return jjMoveStringLiteralDfa11_0(active1, 0x20L);
            case 103:
                return jjMoveStringLiteralDfa11_0(active1, 0x40L);
            case 112:
                if ((active1 & 0x80L) != 0L)
                    return jjStopAtPos(10, 71);
                break;
            case 116:
                return jjMoveStringLiteralDfa11_0(active1, 0x10L);
            case 121:
                return jjMoveStringLiteralDfa11_0(active1, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(9, 0L, active1);
    }

    private int jjMoveStringLiteralDfa11_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(9, 0L, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(10, 0L, active1);
            return 11;
        }
        switch (curChar) {
            case 103:
                return jjMoveStringLiteralDfa12_0(active1, 0x4000L);
            case 104:
                return jjMoveStringLiteralDfa12_0(active1, 0x40L);
            case 116:
                if ((active1 & 0x20L) != 0L)
                    return jjStopAtPos(11, 69);
                return jjMoveStringLiteralDfa12_0(active1, 0x10L);
            default:
                break;
        }
        return jjStartNfa_0(10, 0L, active1);
    }

    private int jjMoveStringLiteralDfa12_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(10, 0L, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(11, 0L, active1);
            return 12;
        }
        switch (curChar) {
            case 101:
                return jjMoveStringLiteralDfa13_0(active1, 0x4000L);
            case 111:
                return jjMoveStringLiteralDfa13_0(active1, 0x10L);
            case 116:
                if ((active1 & 0x40L) != 0L)
                    return jjStopAtPos(12, 70);
                break;
            default:
                break;
        }
        return jjStartNfa_0(11, 0L, active1);
    }

    private int jjMoveStringLiteralDfa13_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(11, 0L, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(12, 0L, active1);
            return 13;
        }
        switch (curChar) {
            case 109:
                if ((active1 & 0x10L) != 0L)
                    return jjStartNfaWithStates_0(13, 68, 0);
                break;
            case 110:
                return jjMoveStringLiteralDfa14_0(active1, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(12, 0L, active1);
    }

    private int jjMoveStringLiteralDfa14_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(12, 0L, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(13, 0L, active1);
            return 14;
        }
        switch (curChar) {
            case 78:
                if ((active1 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_0(14, 78, 0);
                break;
            default:
                break;
        }
        return jjStartNfa_0(13, 0L, active1);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 82)
                                    kind = 82;
                                jjCheckNAdd(2);
                            } else if (curChar == 45)
                                jjCheckNAdd(2);
                            break;
                        case 2:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            kind = 82;
                            jjCheckNAdd(2);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                        case 0:
                            if ((0x7fffffe00084004L & l) == 0L)
                                break;
                            kind = 80;
                            jjCheckNAdd(0);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {
    };

    private static boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                return (jjbitVec0[i1] & l1) != 0L;
        }
    }

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
            null,       null,      null,       null,      null,       null,
            null,       null,      "\134\176", "\134\55", "\134\137", "\134\12",
            "\134\15",  "\134\52", "\134\174", "\134\72", "\134\173", "\134\175",
            "\134\134", null,      null,       null,      null,       null,
            null,       null,      null,       null,      null,       null,
            null,       null,      null,       null,      null,       null,
            null,       null,      null,       null,      null,       null,
            null,       null,      null,       null,      null,       null,
            null,       null,      null,       null,      null,       null,
            null,       null,      null,       null,      null,       null,
            null,       null,      null,       null,      null,       null,
            null,       null,      null,       null,      null,       null,
            null,       null,      null,       null,      null,       null,
            null,       null,      null,       null,      null,       null,
    };

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
            "CONTROL",
            "HEX",
            "DEFAULT",
    };

    /**
     * Lex State array.
     */
    public static final int[] jjnewLexState = {
            -1,  0,  1, -1, -1, -1,  2,  2, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1,  2,  2,  2,  2,  2, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2,
    };
    static final long[] jjtoToken = { 0xfffffffff85fffc1L, 0x57fffL, };
    static final long[] jjtoSkip = { 0x7800038L, 0x80000L, };
    static final long[] jjtoMore = { 0x6L, 0x0L, };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[3];
    private final int[] jjstateSet = new int[6];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected char curChar;

    /**
     * Constructor.
     */
    public RTFParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public RTFParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 3; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if (lexState >= 3 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = new Token(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 2;
    int defaultLexState = 2;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     * @return Token next token from given input
     */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }
            image = jjimage;
            image.setLength(0);
            jjimageLen = 0;

            for (; ;) {
                switch (curLexState) {
                    case 0:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        if (jjmatchedPos == 0 && jjmatchedKind > 83) {
                            jjmatchedKind = 83;
                        }
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        break;
                    case 2:
                        try {
                            input_stream.backup(0);
                            while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
                                curChar = input_stream.BeginToken();
                        } catch (IOException e1) {
                            continue EOFLoop;
                        }
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_2();
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos)
                        input_stream.backup(curPos - jjmatchedPos - 1);
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        TokenLexicalActions(matchedToken);
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        continue EOFLoop;
                    }
                    jjimageLen += jjmatchedPos + 1;
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else
                        error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    void TokenLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            case 8:
                image.append(jjstrLiteralImages[8]);
                lengthOfMatch = jjstrLiteralImages[8].length();
                matchedToken.image = "\u00a0";
                break;
            case 9:
                image.append(jjstrLiteralImages[9]);
                lengthOfMatch = jjstrLiteralImages[9].length();
                matchedToken.image = "\u00ad";
                break;
            case 10:
                image.append(jjstrLiteralImages[10]);
                lengthOfMatch = jjstrLiteralImages[10].length();
                matchedToken.image = "\u2011";
                break;
            case 16:
                image.append(jjstrLiteralImages[16]);
                lengthOfMatch = jjstrLiteralImages[16].length();
                matchedToken.image = "{";
                break;
            case 17:
                image.append(jjstrLiteralImages[17]);
                lengthOfMatch = jjstrLiteralImages[17].length();
                matchedToken.image = "}";
                break;
            case 18:
                image.append(jjstrLiteralImages[18]);
                lengthOfMatch = jjstrLiteralImages[18].length();
                matchedToken.image = "\u005c\u005c";
                break;
            default:
                break;
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

}
